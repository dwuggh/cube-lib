* cube-lib
  Rubik's cube library using three.js and typescript

** install
** usage
*** quick try
    - clone this repo, and set up deps:
    #+BEGIN_SRC bash
      git clone https://github.com/dwuggh/cube-lib.git
      yarn
      yarn run build
      yarn run start
    #+END_SRC
    - open http://127.0.0.1:8000 in your browser.
*** use in browser or as modules
    This project uses umd. So in html:
    #+BEGIN_SRC html
      <script src="node_modules/three/build/three.js"></script>
      <script src="node_modules/cube-lib/build/cube-lib.js"></script>
    #+END_SRC
    and in node.js:
    #+BEGIN_SRC javascript

      import * as THREE from 'three'
      import * as Cubelib from 'cube-lib'
      


      // let's roll!

      // set up scenes
      var scene = new THREE.Scene();
      var camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );
      var renderer = new THREE.WebGLRenderer(
        { antialias: true }
      );
      renderer.setSize( window.innerWidth, window.innerHeight );
      var canvas = renderer.domElement;
      document.body.appendChild( renderer.domElement );
      scene.background = new THREE.Color(0xfeffa8);
      camera.position.set(0, 0, 5);


      // initialize a cube
      const cube = new Cubelib.Hexahedron(Cubelib.HexahedronSVGCubelet, 4);
      cube.rotation.y -= 0.5
      cube.rotation.x += 0.5
      cube.scale.setScalar(0.7)
      scene.add(cube);

      var animate = function () {
        requestAnimationFrame( animate );

        // in case you want to add some rotations
        // cube.rotation.x += 0.03
        // cube.rotation.y -= 0.03
        // cube.rotation.z -= 0.03

        // remember to call update inside the loop
        cube.update()

        renderer.render( scene, camera );
      };

      animate();

      // use moveBuilder to create moves
      const R = Cubelib.moveBuilder('R')
      const U = Cubelib.moveBuilder('U')

      // adjust angles
      const R2 = Cubelib.moveBuilder('R', 1, 2)

      // double layer rotation
      const r = Cubelib.moveBuilder('U', 2)

      // middle layer rotation on a 4x4x4 cube
      const M = Cubelib.moveBuilder('U', 2, 1, 1)

      // you can also use Cubelib.parser
      // perform a PLL
      const T_perm = "RUR'U' R'FR2U'R'U'RUR'F'"
      const moves = Cubelib.parser(T_perm, 4)

      // finally, use cube.enqueue to perfrom them
      cube.enqueue(R)
      cube.enqueue(moves)
    #+END_SRC
